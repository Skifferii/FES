
console.log("Задание 1. Even/Odd n// Создайте ф-цию, которая определяет парность числа");
const evenOrOdd = (a) =>  Math.floor(a)% 2 === 0 ? 'even' : 'odd'; 


console.log("Функция должна вернуть строку 'even' если число четное");
console.log("Функция должна вернуть строку 'odd' если число не четное");
console.log("8 число четное: " + evenOrOdd(8)); 
console.log("3.7 число не четное: " + evenOrOdd(3.7));

console.log("----------------------------------------------------------");
console.log("----------------------------------------------------------")
console.log("----------------------------------------------------------");
console.log("Задание 2. Стрелочная ф-ция возводящая число в квадрат");

const kvadrat = (b) => Math.floor(b)*Math.floor(b);

console.log(" Функция должна принимать целое число");
console.log("Если число не целое - скруглить его в меньшую сторону : ");
console.log(kvadrat(2.5))
console.log("----------------------------------------------------------");
console.log("----------------------------------------------------------")
console.log("----------------------------------------------------------")

console.log("Задание 3. Сумма четных чисел в заданном промежутке ")

const summAll = (start, end) => {
   start = Math.floor(start);
   end = Math.floor(end);
   let sum = 0;
    for (let i = start; i <= end; i++) {
           if (i % 2 === 0) {
           sum = sum + i;
       }
   }
   return sum;
};
console.log("Аргументы функции два - начало промежутка: 2.5  и конец промежутка: 9.9");
console.log("сли число не целое - скруглить его в меньшую сторону")
console.log("Сумма четных чисел в заданном промежутке:")
console.log(summAll(2.5, 9.9))
console.log("----------------------------------------------------------");
console.log("----------------------------------------------------------")
console.log("----------------------------------------------------------")


// Задание 4. Простые числа в заданном промежутке
// Нужно создать две функции.

// // Первая функция должна принимать число и возвращать результат булевого типа - является ли число простым, или нет. 
//  Число является простым, если оно делиться без остатка только на 1 и само на себя.

// Вторая функция должна вернуть в виде массива все простые числа в промежутке от 1 до n, где n - первый аргумент функции.

// Вторая функция должна пользоваться первой функцией для определения простых чисел.

// Первая функция не должна быть колбеком, просто рядом лежать, или даже внутри второй функции. На ваш выбор.




// Функция, определяющая является ли число простым
const isPrime = (num) => {
   if (num <= 1) {
       return false;
   }
   for (let i = 2; i <= Math.sqrt(num); i++) {
       if (num % i === 0) {
           return false;
       }
   }
   return true;
};

// Функция, возвращающая массив всех простых чисел в заданном промежутке
const getPrimesInRange = (n) => {
   const primes = [];
   for (let i = 2; i <= n; i++) {
       if (isPrime(i)) {
           primes.push(i);
       }
   }
   return primes;
};

// Пример использования второй функции
console.log(getPrimesInRange(200));

console.log(Math.sqrt(16));



